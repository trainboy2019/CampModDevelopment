package com.camp.biome.features;

import java.util.List;

import com.camp.item.ItemManager;
import com.camp.lib.StringLibrary;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.block.BlockLeaves;
import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.util.IIcon;
import net.minecraft.world.World;

public class NCLeaf extends BlockLeaves{
	public static final String[][] leafTypes = new String[][]{{"LeafCherry", "LeafwhiteCherry"}, {"LeafCherryOpaque", "LeafwhiteCherryOpaque"}};
	public static final String[] Leaves = new String[] {"Cherry", "whiteCherry"};
	
	
	
	protected void func_150124_c(World p_150124_1_, int p_150124_2_, int p_150124_3_, int p_150124_4_, int p_150124_5_, int p_150124_6_)
    {
        if ((p_150124_5_ & 3) == 1 && p_150124_1_.rand.nextInt(p_150124_6_) == 0)
        {
            this.dropBlockAsItem(p_150124_1_, p_150124_2_, p_150124_3_, p_150124_4_, new ItemStack(ItemManager.cherry, 1, 0));
        }
    }

    /**
     * Determines the damage on the item the block drops. Used in cloth and wood.
     */
    public int damageDropped(int p_149692_1_)
    {
        return super.damageDropped(p_149692_1_) + 4;
    }

    /**
     * Get the block's damage value (for use with pick block).
     */
    public int getDamageValue(World p_149643_1_, int p_149643_2_, int p_149643_3_, int p_149643_4_)
    {
        return p_149643_1_.getBlockMetadata(p_149643_2_, p_149643_3_, p_149643_4_) & 3;
    }

    /**
     * Gets the block's texture. Args: side, meta
     */
    @SideOnly(Side.CLIENT)
    public IIcon getIcon(int p_149691_1_, int p_149691_2_) {
		return null;
	}    
    
    

    /**
     * returns a list of blocks with the same ID, but different meta (eg: wood returns 4 blocks)
     */
    @SideOnly(Side.CLIENT)
    public void getSubBlocks(Item item, CreativeTabs p_149666_2_, List list)
    {
    	for(int i = 0; i < Leaves.length; i++){
			list.add(new ItemStack(item, 1, i));
		}
    }

    /*@SideOnly(Side.CLIENT)
    public void registerBlockIcons(IIconRegister iconRegister)
    {
        for (int i = 0; i < leafTypes.length; ++i)
        {
            this.field_150129_M[i] = new IIcon[leafTypes[i].length];

            for (int j = 0; j < leafTypes[i].length; ++j)
            {
                this.field_150129_M[i][j] = iconRegister.registerIcon(leafTypes[i][j]);
            }
        }
    }*/
    
    /*@SideOnly(Side.CLIENT)
	public void registerBlockIcons(IIconRegister iconRegister) {
		this.blockIcon = iconRegister.registerIcon(StringLibrary.MODID + ":" + "AlabasterOvenSide");
		this.getIcon(getRenderType(), getRenderType()) = iconRegister.registerIcon(StringLibrary.MODID + ":" + (this.isActive ? "AlabasterOvenFrontOn" : "AlabasterOvenFrontOff"));
		this.iconTop = iconRegister.registerIcon(StringLibrary.MODID + ":" + "AlabasterOvenTop");
	}*/
    
   /* public void registerBlockIcons (IIconRegister iconRegister){
		this.field_150129_M = new IIcon[Leaves.length];
		this.field_150127_b = new IIcon[Leaves.length];
		
		for(int i = 0; i < this.field_150167_a.length; i++){
			this.field_150167_a[i] = iconRegister.registerIcon(this.getTextureName() + Logs[i]);
			this.field_150166_b[i] = iconRegister.registerIcon(this.getTextureName() + Logs[i] + "Top");
		}
	}*/
    
    @SideOnly(Side.CLIENT)
    public void registerBlockIcons(IIconRegister iconRegister)
    {
    	for (int i = 0; i < leafTypes.length; ++i)
    	{
    		this.field_150129_M[i] = new IIcon[leafTypes[i].length];
    		
    		for (int j = 0; j < leafTypes[i].length; ++j)
    		{
    			this.field_150129_M[i][j] = iconRegister.registerIcon(leafTypes[i][j]);
    		}
    	}
    }

    
	
	
	
	

	/*@Override
	public IIcon getIcon(int side, int meta) {
		return (meta & 3) == 1 ? this.field_150129_M[this.field_150127_b][1] : this.field_150129_M[this.field_150127_b][0];
	}*/

	@Override
	public String[] func_150125_e() {
		return Leaves;
	}

}
